---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import DynamicSearch from "@/components/jobs/dynamic/DynamicSearch.astro";
import DynamicOptions from "@/components/jobs/dynamic/DynamicOptions.astro";
import CtaWack from "@/components/cta/CtaWack.astro";
import DynamicEntries from "@/components/jobs/dynamic/DynamicEntries.astro";

// Required for static paths
export async function getStaticPaths() {
  const allJobs = await getCollection("jobs");
  const uniqueLocations = [...new Set(allJobs.map(job => job.data.location))];
  
  return uniqueLocations.map(location => ({
    params: { 
      // Convert "Atlanta, GA" to "atlanta-ga-jobs"
      location: `${location.toLowerCase().replace(/,?\s+/g, '-')}-jobs` 
    },
    props: { locationName: location }
  }));
}

// Get props and params
const { locationName } = Astro.props;
const { location } = Astro.params;

// Get all jobs
const allJobs = await getCollection("jobs");

// Filter jobs for this location
const locationJobs = allJobs.filter(job => 
  job.data.location.toLowerCase().replace(/,?\s+/g, '-') === 
  location.replace(/-jobs$/, '')
);

// Sort jobs by featured status first, then by date
const sortedJobs = locationJobs.sort((a, b) => {
  if (a.data.featured && !b.data.featured) return -1;
  if (!a.data.featured && b.data.featured) return 1;
  return new Date(b.data.datePosted).getTime() - new Date(a.data.datePosted).getTime();
});

// Format salary for display
function formatSalary(baseSalary) {
  const { currency, minValue, maxValue, unitText } = baseSalary;
  return `${currency} ${minValue.toLocaleString()}-${maxValue.toLocaleString()} per ${unitText.toLowerCase()}`;
}

// Create dynamic title and description
const pageTitle = `Electrical Jobs in ${locationName}`;
const pageDescription = `Find local jobs in ${locationName}. Browse the latest positions from top employers in ${locationName}. Competitive pay and immediate openings.`;

// Format location name for display (keep original casing)
const displayLocation = locationName;

// Create breadcrumb JSON-LD
const breadcrumbList = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": "https://electrical.jobs.com/about"
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Jobs",
      "item": "https://www.electrical.jobs.com/"
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": `${displayLocation}`,
      "item": new URL(Astro.url.pathname, Astro.site).toString()
    }
  ]
};
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbList, null, 2)} />
    <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
  </Fragment>

  <!-- Header section -->
  <section>
    <header class="px-8 mx-auto max-w-7xl lg:px-16 xl:px-24 pt-8">
      <div
        class="p-12 lg:px-20 lg:py-24 rounded-3xl bg-gradient-to-tr from-blue-950 via-blue-700 to-blue-400">
        <div class="text-center max-w-xl mx-auto">
          <nav class="inline-flex text-white text-sm leading-6 px-4 py-2 relative bg-white/10 ring-1 ring-white/20 rounded-full">
            <a 
              href="/" 
              class="hover:underline transition-all"
            >
              Home
            </a>
            <span class="mx-2 text-white/60">/</span>
            <a 
              href="/" 
              class="hover:underline transition-all"
            >
              Jobs
            </a>
            <span class="mx-2 text-white/60">/</span>
            <span class="underline">
              {displayLocation}
            </span>
          </nav>
          <h1
            class="text-white font-semibold tracking-tight lg:text-5xl mt-8 text-3xl lg:text-balance">
            Jobs in {displayLocation}
          </h1>
          <p class="text-slate-300 mt-5 lg:text-pretty">
            Find the best jobs in {displayLocation}. We connect skilled candidates with top local employers.
          </p>
        </div>
      </div>
    </header>

    <!-- Search component with correct spacing -->
    <div class="lg:-mt-24 -mt-11">
      <DynamicSearch 
        context="location"
        currentValue={locationName}
      />
    </div>
  </section>

  <!-- Main content with three columns -->
  <div class="mx-auto max-w-7xl lg:px-16 md:px-12 px-8 xl:px-24">
    <div class="mt-4 lg:mt-12 lg:flex lg:gap-x-16">
      <!-- Left column - Filters -->
      <div class="lg:w-1/4">
        <DynamicOptions />
      </div>
      
      <!-- Middle column - Job listings -->
      <div class="lg:w-2/4 mt-8 lg:mt-0 mb-24">
        <ul role="list" class="divide-y divide-slate-100">
          <DynamicEntries jobs={sortedJobs} />
        </ul>
      </div>

      <!-- Right column -->
      <div class="lg:w-1/4 min-w-[240px]">
        <div class="lg:sticky lg:top-8">
          <div class="bg-slate-50 rounded-3xl p-4 lg:p-6">
            <div>
              <h3 class="text-lg font-medium text-purple-900">Jobs in {displayLocation}</h3>
              <p class="text-slate-500 text-sm mt-2">Where People Find Jobs.</p>
              <p class="text-slate-500 text-sm mt-2">Indeed & ZipRecruiter not working? Give us a try.</p>
            </div>
            <div class="mt-6 flex flex-col gap-3">
                <a
                  href="/"
                  class="w-full text-blue-600 items-center font-medium gap-3 inline-flex focus-visible:outline-2 focus-visible:outline-offset-2 focus:outline-none justify-center px-6 lg:px-8 ring-2 ring-transparent focus:ring-offset-2 focus:ring-blue-500 duration-200 py-2 rounded-full active:bg-blue-800 active:text-white bg-blue-100 hover:bg-blue-50"
                >
                  View All Jobs
                </a>
                <a 
                href="/about" 
                class="w-full text-white bg-blue-500 hover:bg-blue-600 font-medium py-2 rounded-full inline-block text-center"
              >
                About Us
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <CtaWack />
</BaseLayout>